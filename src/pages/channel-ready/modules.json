[
    {
        "name": "Content Management Module",
        "summary": "Allow clients to edit their own content.",
        "description": "We used CKEditor for content editing, adding some custom plug-ins for data-driven widgets. This module also enables users to re-arrange pages and group them together into sections."
    },
    {
        "name": "Media Module",
        "summary": "Allow clients to manage images, videos, and documents.",
        "description": "An all-purpose media management system for uploading and managing images, videos, audio files, and documents. Allowed for searching, tagging, updating, adding descriptions to resources. Included integration with Vimeo for videos so videos uploaded to our system were stored on Vimeo."
    },
    {
        "name": "News Module",
        "summary": "Manage timely news items, similar to micro-blogs.",
        "description": "Intended to be used for news rolls on clients web sites. News articles could contain any HTML content."
    },
    {
        "name": "Ad Module",
        "summary": "Allow clients to place and track advertising on their web sites.",
        "description": "Create ads and place them in content via widgets, easily enable or disable them. Similar to news, ads could contain any HTML content. Ads could be tracked and clicks / views could be reported on."
    },
    {
        "name": "Catalog Module",
        "summary": "Product management for online catalogs and e-commerce sites.",
        "description": "Create and manage products and product categories. I created an extensible product attribute system, allowing for clients with varying product types to use the same module without code or database modifications. Multiple SKU's per product allowed for variations within a product. A flexible product heirachy allowed users to organize their catalog as needed and re-organize at will."
    },
    {
        "name": "Messaging Module",
        "summary": "Enable messaging between users of a client's web site.",
        "description": "A module letting users (or admins) send messages to other users, or groups of users, through the client's web site. Messages allowed for HTML content as well as attachments."
    },
    {
        "name": "Member Module",
        "summary": "Add member portal funcionality to a client's web site.",
        "description": "Manage members of a client's web site. Members could be assigned to roles. Access to content and resources could be granted opr revoked based on roles."
    },
    {
        "name": "Property Management Module",
        "summary": "Manage properties for sale or lease.",
        "description": "This was a very specialized module created in reposnse to a client's needs. This client was a commercial real estate developer and listed all their available properties. Property data included HTML content as well as specific availabilities, associated media resources, and GIS data used for mapping on the client's web site."
    },
    {
        "name": "Client Data Module",
        "summary": "Adds custom data management to a project without the need for database changes.",
        "description": "Clients often had some set of data that was unique to them, that was used to drive content widgets. Rather than add database tables and the necessary ORM code for each custom data set, I created an extensible system for defining the shape of client data in project configuration. The client data module could then use this configuration to allow for administration of this data, and for parsing the data on the front end, greatly reducing the need for a ton of custom code."
    },
    {
        "name": "Publication Module",
        "summary": "Enable publication workflow, allowing users to make changes and preview them before going live.",
        "description": "Previewing changes to a web site is important, so I set up a publication flow to achieve this. Published data was stored in a production database schema that matched the structure of a staging schema. We maintained a staging and a live site, and each site would look to the appropriate database schema. Change tracking was originally achieved using real-time comparison of the schemas to look for changes. Since schema comparison can be costly when many records and their related records are involved, I added a method to track changes to the staging schema and log them as they happened. This meant we did not need to compare entire data sets at one time. I created a publication dashboard which allowed the site administrator to see all pending changes in one place and selectively publish items."
    },
    {
        "name": "Events Module",
        "summary": "Create and manage an event calender, including event registration.",
        "description": "Create and manage events. Events could be categorized. Event descriptions could contain HTML content. Multiple sessions per event were allowed. I included a registration system in this module, so users could define different pricing levels if needed, as well as create custom data collection forms for each regsistrant. If using the member module, events could be restricted to particular roles. Resgistrants could be viewed and managed from within the content management system."
    },
    {
        "name": "Course Development Module",
        "summary": "Design curriculum for online training.",
        "description": "A few of our clients did internal training for employees. This module allowed course administrators to create content in different curricula, which could be associated with user roles, and broken out into courses and modules. Modules were broken out into sections, each allowing for rich HTML content and media resources. Custom quizzes could be created for for modules and courses. We also included the concept of activities, which were intended to be real-life tasks required to complete a module. Progress through a course could be controlled by requiring completion of a quiz or activity before a user could move on."
    }
]